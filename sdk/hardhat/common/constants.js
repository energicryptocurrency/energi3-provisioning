const DEV_ACCOUNTS = [
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',
        balance: '10000000000000000000000000', // 10 000 000 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdff',
        balance: '200000000000000000000000', // 200 000 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcfff',
        balance: '100000000000000000000000', // 100 000 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abffff',
        balance: '11000000000000000000000', // 11 000 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890afffff',
        balance: '1000000000000000000000', // 1 000 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890ffffff',
        balance: '1000000000', // 0.000 000 001 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef123456789fffffff',
        balance: '0', // 0 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef12345678ffffffff',
        balance: '100000000000000000000000', // 100 000 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567fffffffff',
        balance: '100000000000000000000000', // 100 000 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef123456ffffffffff',
        balance: '100000000000000000000000', // 100 000 NRG
    },
    {
        privateKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef12345fffffffffff',
        balance: '10000000000000000000000000', // 10 000 000 NRG
    },
];

const TESTNET_DERIVATION_PATH = "m/44'/49797'/0'/0/";

const MAINNET_DERIVATION_PATH = "m/44'/39797'/0'/0/";

const PROXIES = {
    block_reward: '0x0000000000000000000000000000000000000300',
    treasury: '0x0000000000000000000000000000000000000301',
    mn_registry: '0x0000000000000000000000000000000000000302',
    staker_reward: '0x0000000000000000000000000000000000000303',
    backbone_reward: '0x0000000000000000000000000000000000000304',
    spork_registry: '0x0000000000000000000000000000000000000305',
    checkpoint_registry: '0x0000000000000000000000000000000000000306',
    blacklist_registry: '0x0000000000000000000000000000000000000307',
    compensation_fund: '0x0000000000000000000000000000000000000000',
    mn_token: '0x0000000000000000000000000000000000000309',
    hf_registry: '0x0000000000000000000000000000000000000000',
    proxy_registry: '0x0000000000000000000000000000000000000000',
    global_constants: '0x0000000000000000000000000000000000000000',
};

const IMPLEMENTATIONS = {
    gen2_migration: '0x0000000000000000000000000000000000000308',
    block_reward: '0x0000000000000000000000000000000000000310',
    treasury: '0x0000000000000000000000000000000000000311',
    mn_registry: '0x0000000000000000000000000000000000000312',
    staker_reward: '0x0000000000000000000000000000000000000313',
    backbone_reward: '0x0000000000000000000000000000000000000314',
    spork_registry: '0x0000000000000000000000000000000000000315',
    checkpoint_registry: '0x0000000000000000000000000000000000000316',
    blacklist_registry: '0x0000000000000000000000000000000000000317',
    compensation_fund: '0x0000000000000000000000000000000000000318',
    mn_token: '0x0000000000000000000000000000000000000319',
    hf_registry: '0x0000000000000000000000000000000000000321',
    proxy_registry: '0x0000000000000000000000000000000000000000',
    global_constants: '0x0000000000000000000000000000000000000000',
};

const MIGRATION_CONTRACT = IMPLEMENTATIONS.gen2_migration;
const SYSTEM_FAUCET = '0x0000000000000000000000000000000000000320';
const REWARD_BACKBONE = '2280000000000000000'; // 2.28 NRG
const REWARD_MASTERNODE = '9140000000000000000'; // 9.14 NRG
const REWARD_STAKER = '2280000000000000000'; // 2.28 NRG
const REWARD_TREASURY = '184000000000000000000000'; // 184,000 NRG;
const FEE_BLACKLIST = '1000000000000000000000'; // 1,000 NRG
const FEE_BLACKLIST_REVOKE = '100000000000000000000'; // 100 NRG
const FEE_BLACKLIST_DRAIN = '100000000000000000000'; // 100 NRG
const FEE_UPGRADE = '10000000000000000000000'; // 10,000 NRG
const FEE_BUDGET = '300000000000000000000'; // 300 NRG
const CHECKPOINT_MAX = 10; // checkpoints
const CHECKPOINT_SIGNING_PERIOD = 1440; // blocks
const QUORUM_MIN = 1; // 1%
const QUORUM_MAJORITY = 51; // 51%
const QUORUM_MAX = 100; // 100%
const PERIOD_UPGRADE_MIN = 60 * 60 * 24 * 7 * 2; // 2 weeks
const PERIOD_UPGRADE_MAX = 60 * 60 * 24 * 365; // 365 days
const MN_HEARTBEAT_PAST_BLOCKS = 10; // blocks
const MN_HEARTBEAT_INTERVAL_MIN = 60 * 30; // 30 minutes
const MN_HEARTBEAT_INTERVAL_MAX = 60 * 60 * 2; // 2 hours
const MN_COLLATERAL_MIN = '1000000000000000000000'; // 1,000 NRG
const CALL_GAS = '15000000'; // SporkRegistry consensusGasLimits callGas(wei)
const TRANSFER_GAS = '30000000'; // SporkRegistry consensusGasLimits xferGas(wei)
const BUDGET_PROPOSAL_MAX = 100; // proposals
const PERIOD_BUDGET_MIN = 14 * 24 * 60 * 60; // 2 weeks
const PERIOD_BUDGET_MAX = 30 * 24 * 60 * 60; // 30 days
const FEE_PROXY = '1000000000000000000000'; // 1,000 NRG
const PERIOD_PROXY_MIN = 60 * 60 * 24 * 7 * 2; // 2 weeks
const PERIOD_PROXY_MAX = 60 * 60 * 24 * 30; // 30 days

module.exports = {
    DEV_ACCOUNTS,
    TESTNET_DERIVATION_PATH,
    MAINNET_DERIVATION_PATH,
    PROXIES,
    IMPLEMENTATIONS,
    MIGRATION_CONTRACT,
    SYSTEM_FAUCET,
    REWARD_BACKBONE,
    REWARD_MASTERNODE,
    REWARD_STAKER,
    REWARD_TREASURY,
    FEE_BLACKLIST,
    FEE_BLACKLIST_REVOKE,
    FEE_BLACKLIST_DRAIN,
    FEE_UPGRADE,
    FEE_BUDGET,
    CHECKPOINT_MAX,
    CHECKPOINT_SIGNING_PERIOD,
    QUORUM_MIN,
    QUORUM_MAJORITY,
    QUORUM_MAX,
    PERIOD_UPGRADE_MIN,
    PERIOD_UPGRADE_MAX,
    MN_HEARTBEAT_PAST_BLOCKS,
    MN_HEARTBEAT_INTERVAL_MIN,
    MN_HEARTBEAT_INTERVAL_MAX,
    MN_COLLATERAL_MIN,
    CALL_GAS,
    TRANSFER_GAS,
    BUDGET_PROPOSAL_MAX,
    PERIOD_BUDGET_MIN,
    PERIOD_BUDGET_MAX,
    FEE_PROXY,
    PERIOD_PROXY_MIN,
    PERIOD_PROXY_MAX,
};
